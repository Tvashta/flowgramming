const capitalize=e=>e.charAt(0).toUpperCase()+e.slice(1);window.swal=(e,n="error")=>{Swal.fire({title:capitalize(n),html:e,icon:n,heightAuto:!1})},window.swalConfirm=(e,n)=>{Swal.fire({title:"Are you sure?",html:e,icon:"warning",showCancelButton:!0,confirmButtonColor:"#3085d6",cancelButtonColor:"#d33",confirmButtonText:"Yes, do it!",heightAuto:!1}).then(e=>{e.isConfirmed&&n()})},window.toast=e=>{Swal.mixin({toast:!0,position:"top-end",showConfirmButton:!1,timer:5e3,timerProgressBar:!0,icon:"success",title:e,didOpen:e=>{e.addEventListener("mouseenter",Swal.stopTimer),e.addEventListener("mouseleave",Swal.resumeTimer)}}).fire()};let loadingToast=null;function getCurrentElementValue(e,n){let a=void 0;switch(n){case"input":a=e.attr("element/variableName");break;case"output":case"comment":case"if":case"doWhileExpr":case"while":if("for"!==e.attr("element/loopType"))a=e.attr("element/expression");else{const{forLoop:n,expression:t}=e.attr("element");a={forLoop:n,expression:t}}break;case"declare":case"assignment":case"function":a=e.attr("element")}return a||""}function shouldSelectDataType(e,n){return"Default"===n?e.variableType&&"Default"!==e.variableType?"":"selected":e.variableType&&e.variableType.startsWith(n)?"selected":""}function shouldMarkArrayCheckbox(e){return e.variableType&&e.variableType.endsWith("array")?"checked":""}function onArrayCheckboxChanged(){$("#isArray").is(":checked")?($("#arrayDimension").show(),onArrayDimensionChanged()):$("#arrayDimension").hide()}function shouldMarkArray2D(e){return e.is2DArray?"checked":""}function shouldMarkArray1D(e){return e.is2DArray?"":"checked"}function onArrayDimensionChanged(){"1D"===$("input[name='dimension']:checked").val()?($("#arrayLength").show(),$("#array2D").hide()):($("#arrayLength").hide(),$("#array2D").show())}function handleElementDoubleClick(e){const n=findModel(e.model.id);$("#delbtn").text("Delete").attr("onclick","handleDelete()"),$("#modal .modal-content").attr("data-element",JSON.stringify(n));const a=n.attr("element/type"),t=getCurrentElementValue(n,a);let r,o;switch(a){case"declare":o=`\n                    <p>Enter Variable Name and Type</p>\n                     <div class="input-group">\n                        <input id="variable" type="text" class="form-control" placeholder="Name"\n                                value="${t.variableName||""}">\n                        <select class="custom-select" id="variableType">\n                            <option value="Default" ${shouldSelectDataType(t,"Default")} disabled>\n                                Type\n                            </option>\n                            <option value="Integer" ${shouldSelectDataType(t,"Integer")}>\n                                Integer\n                            </option>\n                            <option value="Float" ${shouldSelectDataType(t,"Float")}>\n                                Float\n                            </option>\n                            <option value="Char" ${shouldSelectDataType(t,"Char")}>\n                                Character\n                            </option>\n                        </select>\n                    </div>\n                    <hr>\n                    <div class="form-check ml-1 mt-1">\n                      <input class="form-check-input" type="checkbox" id="isArray" \n                            ${shouldMarkArrayCheckbox(t)} onclick="onArrayCheckboxChanged()">\n                      <label class="form-check-label" for="isArray">\n                        Is an array\n                      </label>\n                    </div>\n                    <div id='arrayDimension'>\n                        <div class="form-check" >\n                            <div class="form-check form-check-inline">\n                              <input class="form-check-input" type="radio" id="1D" value='1D' name='dimension' ${shouldMarkArray1D(t)} onchange="onArrayDimensionChanged()">\n                              <label class="form-check-label" for="1D">1D</label>\n                            </div>\n                            <div class="form-check form-check-inline">\n                              <input class="form-check-input" type="radio" name='dimension' value='2D' id="2D" ${shouldMarkArray2D(t)} onchange='onArrayDimensionChanged()'>\n                              <label class="form-check-label" for="2D">2D</label>\n                            </div>\n                        </div>\n                        <div class="input-group mt-2" >\n                            <input id="arrayLength" type="number" class="form-control" placeholder="Array length"\n                                        value="${t.arrayLength||""}" min="1">\n                        </div>  \n                        <div class="input-group mt-2" id='array2D'>\n                            <input id="arrayRow" type="number" class="form-control" placeholder="Rows"\n                                        value="${t.rowLen||""}" min="1">\n                            <input id="arrayCol" type="number" class="form-control" placeholder="Columns"\n                                        value="${t.colLen||""}" min="1">\n                        </div>   \n                    </div> \n            `,r=function(){const e=$("#variable").val();let a=$("#variableType option:selected").val(),t=$("#arrayLength").val(),r=$("#arrayRow").val(),o=$("#arrayCol").val();if($("#modal").modal("hide"),e.length<=0)swal("Enter the variable name before declaring it");else if("Default"===a)swal("Enter the variable type before declaring it");else if($("#isArray").is(":checked")&&"1D"===$("input[name='dimension']:checked").val()&&(0===parseInt(t)||isNaN(parseInt(t))))swal("The array length should be declared");else if($("#isArray").is(":checked")&&"2D"===$("input[name='dimension']:checked").val()&&(0===parseInt(r)||isNaN(parseInt(r))||isNaN(parseInt(o))||0===parseInt(o)))swal("The number of rows and columns should be declared");else if(r.includes(".")||o.includes(".")||t.includes("."))swal("Array sizes must only be natural numbers");else{const l=$("#isArray").is(":checked"),s="2D"===$("input[name='dimension']:checked").val();a+=l?" array":"";let c=a+" ";variableArray=e.split(",");let d=!0;for(let e=0;e<variableArray.length&&(d=d&&handleNamingConvention(variableArray[e]),d);e++);d&&(l?s?(variableArray.forEach(e=>{c+=`${e}[${r}][${o}], `}),t=""):(variableArray.forEach(e=>{c+=`${e}[${t}], `}),r=o=""):variableArray.forEach(e=>{c+=e+", "}),n.attr({label:{text:getWrapText(c.slice(0,-2))},element:{variableName:e,variableArray:variableArray,variableType:a,is2DArray:s,rowLen:r,colLen:o,arrayLength:t,isArrayChecked:l}}))}};break;case"input":o=`\n                <p>Enter Variable Name</p>\n                <div class="input-group">\n                    <input id="variable" type="text" class="form-control"\n                            value="${escapeQuotes(t)}">\n                </div>\n            `,r=function(){const e=$("#variable").val();$("#modal").modal("hide"),e.length>0?n.attr({label:{text:getWrapText("Input "+e)},element:{variableName:e}}):swal("Enter input variable name")};break;case"comment":o=`\n                    <p>Enter the comment</p>\n                    <div class="input-group">\n                        <input id="exp" type="text" class="form-control"\n                                value="${escapeQuotes(t)}">\n                    </div>\n                `,r=function(){const e=$("#exp").val();$("#modal").modal("hide"),e.length>0?n.attr({label:{text:getWrapText(e)},element:{expression:e}}):swal("Enter the comment")};break;case"output":case"if":case"doWhileExpr":case"while":"for"!==n.attr("element/loopType")?(o=`\n                    <p>Enter the expression</p>\n                    <div class="input-group">\n                        <input id="exp" type="text" class="form-control"\n                                value="${escapeQuotes(t)}">\n                    </div>\n                `,r=function(){const e=$("#exp").val();$("#modal").modal("hide"),e.length>0?n.attr({label:{text:getWrapText(("output"===a?"Print ":"")+e)},element:{expression:e}}):swal("Enter the expression")}):(o=`\n                      <p>Enter expressions below</p>\n                      <hr>\n                      <div class="form-group">\n                        <label for="initialisation">Initialisation</label>\n                        <input type="text" placeholder="Ex: counter = 1" class="form-control" id="initialisation"\n                            value="${t.forLoop&&escapeQuotes(t.forLoop.init)||""}">\n                      </div>\n                      <div class="form-group">\n                        <label for="condition">Condition</label>\n                        <input type="text" placeholder="Ex: counter < value" class="form-control" id="condition"\n                            value="${t.expression?escapeQuotes(t.expression):""}">\n                      </div>\n                      <div class="form-group">\n                        <label for="incrementation">Incrementation</label>\n                        <input type="text" placeholder="Ex: counter = counter * 2" class="form-control" id="incrementation"\n                            value="${t.forLoop&&escapeQuotes(t.forLoop.incr)||""}">\n                      </div>\n                `,r=function(){const e=$("#initialisation").val(),a=$("#condition").val(),t=$("#incrementation").val();$("#modal").modal("hide"),0===e.length?swal("Enter initial value"):0===a.length?swal("Enter the condition"):0===t.length?swal("Increment the variable"):n.attr({label:{text:getWrapText(`${e}; ${a}; ${t}`)},element:{expression:a,forLoop:{init:e,incr:t}}})});break;case"assignment":o=`\n                <p>Select a variable and enter the value</p>\n                <div class="input-group mb-3">\n                  <input type="text" id="variableName" class="form-control" placeholder="Variable name"\n                    value="${t.variableName?escapeQuotes(t.variableName):""}">\n                  <input type="text" id="variableValue" class="form-control" placeholder="Variable value"\n                    value="${t.variableName?escapeQuotes(t.variableValue):""}">\n                </div>\n            `,r=function(){const e=$("#variableValue").val(),a=$("#variableName").val();$("#modal").modal("hide"),a.length<=0?swal("Enter the variable name"):e.length<=0?swal("Enter variable value"):n.attr({label:{text:getWrapText(a+" = "+e)},element:{variableName:a,variableValue:e}})};break;case"function":o=`\n                <p>Function call</p>\n                <div class="input-group mb-3">\n                  <input type="text" id="functionName" class="form-control" placeholder="Function name"\n                    value="${t.functionName?escapeQuotes(t.functionName):""}">\n                </div>\n                <div class="input-group mb-3">\n                  <input type="text" id="functionParams" class="form-control" placeholder="Comma separated parameters"\n                    value="${t.functionParams?escapeQuotes(t.functionParams):""}">\n                </div>\n                <div class="input-group">\n                  <input type="text" id="functionVariable" class="form-control" placeholder="Variable for return value"\n                    value="${t.functionVariable?escapeQuotes(t.functionVariable):""}">\n                </div>\n            `,r=function(){const e=$("#functionParams").val(),a=$("#functionName").val(),t=$("#functionVariable").val();$("#modal").modal("hide"),a.length<=0?swal("Enter the function name"):n.attr({label:{text:getWrapText((t?t+" = ":"")+`${a}(${e})`)},element:{functionName:a,functionParams:e,functionVariable:t}})}}$("#modal .modal-body").html(o),$("#modal").modal("show"),$("#okButton").one("click",r),$("#xbtn").on("click",(function(){$("#okButton").off("click")})),$("#isArray").ready(onArrayCheckboxChanged)}function handleNamingConvention(e,n="Variable"){return new RegExp("^[a-zA-Z_][a-zA-Z0-9_]*$").test(e)?!["int","float","string","array","char","if","else","while","for","switch","case","default","break","continue","auto","const","let","var","do","foreach","enum","long","register","return","short","signed","sizeof","static","struct","typedef","union","unsigned","void","volatile","new","throw","catch","printf","scanf","print","cin","cout","scanner","list","in","true","false","null","None","not"].includes(e)||(swal(n+" name must not be a keyword"),!1):(swal("Follow naming convention <br> <hr>"+n+" name should start only either with an underscore or an alphabet. It should not start with number or any other special symbols <hr>Other characters apart from first character can be alphabets, numbers or _ character <hr>"+n+" name should not contain space <br>"),!1)}function handleDelete(){try{let e=$("#modal .modal-content").attr("data-element");if(e&&(e=findModel(JSON.parse(e).id)),"if"===e.attr("element/type"))deleteIF(e);else if("while"===e.attr("element/type"))deleteWhile(e);else{if("doWhileExpr"===e.attr("element/type"))throw new Error("DoWhile Block can't be deleted");deleteBlock(e)}}catch(e){swal(e.toString())}}function openNewTab(e,n){return window.open(e,n)}window.showLoader=(e,n)=>{loadingToast=Swal.fire({heightAuto:!1,html:`\n            <div class="p-4">\n                <div class="loader"></div>\n                <h2><b>${e}</b></h2>\n                <p>${n}</p>\n            </div>`,showConfirmButton:!1})},window.hideLoader=()=>{loadingToast&&(loadingToast.close(),loadingToast=null)},preventIndependentOpen=()=>{"localhost"===window.location.hostname||window.opener||(window.location.href="/")};let parentWindowContexts=window.opener.getCurrentContexts();function saveFunctions(){$("#saveFunctionsModal").modal("hide"),parentWindowContexts&&window.opener.updateCurrentContexts(parentWindowContexts),window.close()}function showSaveFunctionsModal(){""!==$("#addFn")[0][0].value?$("#saveFunctionsModal").modal("show"):saveFunctions()}function manageFunctionProps(e,n){const a=parentWindowContexts[n],t=$("#functionName");t.val(n).prop("disabled",!0),t.parent().prev().remove(),t.parent().before("<div class='alert alert-warning' role='alert'>\n                Function names are not editable. \n                In case you want to edit, kindly delete and create a new function.\n            </div>"),$("#returnVariable").val(a.returnVariable),a.returnType&&$("#returnType").val(a.returnType),$("#parametersTable tr").remove(),a.parameters&&a.parameters.length>0&&a.parameters.forEach(e=>{addFunctionParamsToTable(e.variableName,e.variableType)}),$("#functionsTable > tr").removeClass("table-info"),$(e).parent().parent().addClass("table-info")}function getHTMLForFunctionTableRow(e){return`<tr>\n                <td>${e}</td>\n                <td>\n                    <a class='nav-item d-inline-flex' href='#' role='button' onclick="manageFunctionProps(this, '${e}')" title='Edit Function'>\n                        <svg class='mx-2 bi bi-list-task my-auto' fill='cornflowerblue' height='1.25em'\n                             viewBox='0 0 16 16'\n                             width='1.25em'\n                             xmlns='http://www.w3.org/2000/svg'>\n                            <path\n                                d='M15.502 1.94a.5.5 0 0 1 0 .706L14.459 3.69l-2-2L13.502.646a.5.5 0 0 1 .707 0l1.293 1.293zm-1.75 2.456l-2-2L4.939 9.21a.5.5 0 0 0-.121.196l-.805 2.414a.25.25 0 0 0 .316.316l2.414-.805a.5.5 0 0 0 .196-.12l6.813-6.814z' />\n                            <path fill-rule='evenodd'\n                                  d='M1 13.5A1.5 1.5 0 0 0 2.5 15h11a1.5 1.5 0 0 0 1.5-1.5v-6a.5.5 0 0 0-1 0v6a.5.5 0 0 1-.5.5h-11a.5.5 0 0 1-.5-.5v-11a.5.5 0 0 1 .5-.5H9a.5.5 0 0 0 0-1H2.5A1.5 1.5 0 0 0 1 2.5v11z' />\n                        </svg>\n                    </a>\n                    <a class='nav-item d-inline-flex' href='#' role='button' onclick="deleteFunction(this, '${e}')" title='Delete Function'>\n                        <svg class='mx-2 bi bi-list-task my-auto' fill='maroon' height='1.25em' viewBox='0 0 16 16'\n                             width='1.25em'\n                             xmlns='http://www.w3.org/2000/svg'>\n                            <path\n                                d='M5.5 5.5A.5.5 0 0 1 6 6v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm2.5 0a.5.5 0 0 1 .5.5v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm3 .5a.5.5 0 0 0-1 0v6a.5.5 0 0 0 1 0V6z' />\n                            <path fill-rule='evenodd'\n                                  d='M14.5 3a1 1 0 0 1-1 1H13v9a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V4h-.5a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1H6a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1h3.5a1 1 0 0 1 1 1v1zM4.118 4L4 4.059V13a1 1 0 0 0 1 1h6a1 1 0 0 0 1-1V4.059L11.882 4H4.118zM2.5 3V2h11v1h-11z' />\n                        </svg>\n                    </a>\n                    <a class='nav-item d-inline-flex' href='#' role='button' id='save-${e}' onclick="downloadFunction('${e}')" title='Save Function'>\n                        <svg xmlns='http://www.w3.org/2000/svg' width='1.2em' height='1.2em' fill='black' class='mx-2 bi bi-save my-auto' viewBox='0 0 16 16'>\n                        <path d='M2 1a1 1 0 0 0-1 1v12a1 1 0 0 0 1 1h12a1 1 0 0 0 1-1V2a1 1 0 0 0-1-1H9.5a1 1 0 0 0-1 1v7.293l2.646-2.647a.5.5 0 0 1 .708.708l-3.5 3.5a.5.5 0 0 1-.708 0l-3.5-3.5a.5.5 0 1 1 .708-.708L7.5 9.293V2a2 2 0 0 1 2-2H14a2 2 0 0 1 2 2v12a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2V2a2 2 0 0 1 2-2h2.5a.5.5 0 0 1 0 1H2z'/>\n                        </svg>\n                    </a>\n                </td>\n            </tr>`}function addFunctionToTable(e){$("#functionsTable").append(getHTMLForFunctionTableRow(e))}function saveFunction(e){const n=$("#functionName"),a=n.val(),t=$("#returnVariable").val(),r=$("#returnType").val();if(!a)return swal("Function name cannot be empty"),!1;if(t&&(!r||"Default"===r))return swal("Return type of the function need to be selected, when you are returning a variable"),!1;if(!handleNamingConvention(a,"Function"))return!1;parentWindowContexts[a]||addFunctionToTable(a);const o=[];return $("#parametersTable tr").each((function(e,n){const a=$(n),t=a.find("td:eq(0)").text(),r=a.find("td:eq(1)").text();o.push({variableName:t,variableType:r})})),parentWindowContexts[a]={...parentWindowContexts[a]||{},returnVariable:t,returnType:r,parameters:o},e.reset(),$("#parametersTable > tr").remove(),$("#functionsTable > tr").removeClass("table-info"),n.prop("disabled",!1),n.parent().prev().remove(),toast(`Function '${a}' saved`),!1}function deleteFunction(e,n){delete parentWindowContexts[n],$(e).parent().parent().remove();const a=$("#functionName");$("form").trigger("reset"),$("#parametersTable > tr").remove(),$("#functionsTable > tr").removeClass("table-info"),a.prop("disabled",!1),a.parent().prev().remove(),toast(`Function '${n}' deleted successfully`)}function deleteParameter(e,n){$(e).parent().parent().remove(),toast(`Parameter '${n}' deleted successfully`)}function getHTMLForParameterRow(e,n){return`<tr>\n                <td>${e}</td>\n                <td>${n}</td>\n                <td>\n                    <a class='nav-item d-inline-flex' href='#' role='button' onclick="manageFunctionParams(this, '${e}','${n}')" title='Edit parameter'>\n                        <svg class='mx-2 bi bi-list-task my-auto' fill='cornflowerblue' height='1.25em'\n                             viewBox='0 0 16 16'\n                             width='1.25em'\n                             xmlns='http://www.w3.org/2000/svg'>\n                            <path\n                                d='M15.502 1.94a.5.5 0 0 1 0 .706L14.459 3.69l-2-2L13.502.646a.5.5 0 0 1 .707 0l1.293 1.293zm-1.75 2.456l-2-2L4.939 9.21a.5.5 0 0 0-.121.196l-.805 2.414a.25.25 0 0 0 .316.316l2.414-.805a.5.5 0 0 0 .196-.12l6.813-6.814z' />\n                            <path fill-rule='evenodd'\n                                  d='M1 13.5A1.5 1.5 0 0 0 2.5 15h11a1.5 1.5 0 0 0 1.5-1.5v-6a.5.5 0 0 0-1 0v6a.5.5 0 0 1-.5.5h-11a.5.5 0 0 1-.5-.5v-11a.5.5 0 0 1 .5-.5H9a.5.5 0 0 0 0-1H2.5A1.5 1.5 0 0 0 1 2.5v11z' />\n                        </svg>\n                    </a>\n                    <a class='nav-item d-inline-flex' href='#' role='button' onclick="deleteParameter(this, '${e}')" title='Delete parameter'>\n                        <svg class='mx-2 bi bi-list-task my-auto' fill='maroon' height='1.25em' viewBox='0 0 16 16'\n                             width='1.25em'\n                             xmlns='http://www.w3.org/2000/svg'>\n                            <path\n                                d='M5.5 5.5A.5.5 0 0 1 6 6v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm2.5 0a.5.5 0 0 1 .5.5v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm3 .5a.5.5 0 0 0-1 0v6a.5.5 0 0 0 1 0V6z' />\n                            <path fill-rule='evenodd'\n                                  d='M14.5 3a1 1 0 0 1-1 1H13v9a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V4h-.5a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1H6a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1h3.5a1 1 0 0 1 1 1v1zM4.118 4L4 4.059V13a1 1 0 0 0 1 1h6a1 1 0 0 0 1-1V4.059L11.882 4H4.118zM2.5 3V2h11v1h-11z' />\n                        </svg>\n                    </a>\n                </td>\n            </tr>`}function addFunctionParamsToTable(e,n){$("#parametersTable").append(getHTMLForParameterRow(e,n))}function shouldMarkArray(e){return e&&(e.endsWith("[]")||e.endsWith("array"))?"checked":""}function shouldMark1DArray(e){return e&&!e.endsWith("[]")||!e?"checked":""}function shouldMark2DArray(e){return e&&e.endsWith("[]")?"checked":""}function getModalBodyForManagingParameter(e,n){return`<p>Enter Variable Name and Type</p>\n             <div class='input-group'>\n                <input id='variableName' type='text' class='form-control' placeholder='Name'\n                        value='${e||""}'>\n                <select class='custom-select' id='variableType'>\n                    <option value='Default' ${shouldSelectDataType({variableType:n},"Default")} disabled>\n                        Type\n                    </option>\n                    <option value='Integer' ${shouldSelectDataType({variableType:n},"Integer")}>\n                        Integer\n                    </option>\n                    <option value='Float' ${shouldSelectDataType({variableType:n},"Float")}>\n                        Float\n                    </option>\n                    <option value='Char' ${shouldSelectDataType({variableType:n},"Char")}>\n                        Character\n                    </option>\n                </select>\n            </div>\n            <hr>\n            <div class='form-check ml-1 mt-1'>\n              <input class='form-check-input' type='checkbox' id='isArray' \n                    ${shouldMarkArray(n)} onchange='onArrayCheckboxChanged()' >\n              <label class='form-check-label' for='isArray'>\n                Is an array\n              </label>\n            </div>\n            <div id='arrayDimension'>\n                 <div class='form-check' >\n                      <div class='form-check form-check-inline'>\n                           <input class='form-check-input' type='radio' id='is1DArray' value='1D' name='dimension' ${shouldMark1DArray(n)}>\n                           <label class='form-check-label' for='1D'>1D</label>\n                      </div>\n                      <div class='form-check form-check-inline'>\n                           <input class='form-check-input' type='radio' name='dimension' value='2D' id='is2DArray' ${shouldMark2DArray(n)}>\n                           <label class='form-check-label' for='2D'>2D</label>\n                      </div>\n                 </div>\n            </div> `}function manageFunctionParams(e,n,a){const t=e&&n&&a;$("#modal .modal-body").html(getModalBodyForManagingParameter(n,a)),$("#modal").modal("show"),$("#isArray").ready(onArrayCheckboxChanged),$("#okButton").one("click",()=>{const n=$("#variableName").val();let a=$("#variableType option:selected").val();$("#modal").modal("hide"),n.length<=0?swal("Enter the variable name before declaring it"):"Default"===a?swal("Enter the variable type before declaring it"):(a+=$("#isArray").is(":checked")?" array":"",a+=$("#is2DArray").is(":checked")?" []":"",handleNamingConvention()&&(t?($(e).parent().parent().after(getHTMLForParameterRow(n,a)),$(e).parent().parent().remove()):addFunctionParamsToTable(n,a)))})}$(document).ready((function(){parentWindowContexts&&Object.keys(parentWindowContexts).forEach(e=>{addFunctionToTable(e)})})),"function"!=typeof JSON.decycle&&(JSON.decycle=function decycle(e,n){"use strict";var a=new WeakMap;return function derez(e,t){var r,o;return void 0!==n&&(e=n(e)),"object"!=typeof e||null===e||e instanceof Boolean||e instanceof Date||e instanceof Number||e instanceof RegExp||e instanceof String?e:void 0!==(r=a.get(e))?{$ref:r}:(a.set(e,t),Array.isArray(e)?(o=[],e.forEach((function(e,n){o[n]=derez(e,t+"["+n+"]")}))):(o={},Object.keys(e).forEach((function(n){o[n]=derez(e[n],t+"["+JSON.stringify(n)+"]")}))),o)}(e,"$")}),"function"!=typeof JSON.retrocycle&&(JSON.retrocycle=function retrocycle($){"use strict";var px=/^\$(?:\[(?:\d+|"(?:[^\\"\u0000-\u001f]|\\(?:[\\"\/bfnrt]|u[0-9a-zA-Z]{4}))*")\])*$/;return function rez(value){value&&"object"==typeof value&&(Array.isArray(value)?value.forEach((function(element,i){if("object"==typeof element&&null!==element){var path=element.$ref;"string"==typeof path&&px.test(path)?value[i]=eval(path):rez(element)}})):Object.keys(value).forEach((function(name){var item=value[name];if("object"==typeof item&&null!==item){var path=item.$ref;"string"==typeof path&&px.test(path)?value[name]=eval(path):rez(item)}})))}($),$});const signingKey="Flowgramming",fnSigningKey="FlowgrammingFunction";function saveFlowChart(){switchContext();saveFile("Untitled.fgmin",JSON.stringify(JSON.decycle({signingKey:signingKey,contexts:contexts})))}function downloadFunction(e){window.opener.switchContext();const n=e+".fgfn";if(e in window.opener.getCurrentContexts()){let a={[e]:window.opener.getCurrentContexts()[e]};saveFile(n,JSON.stringify(JSON.decycle({signingKey:fnSigningKey,contexts:a})),"save-"+e)}}function importFlowGram(e){try{const n=JSON.retrocycle(JSON.parse(e));if(n.signingKey!==signingKey)return void swal("Flowgramming doesn't support that file!");contexts=n.contexts,currentContextName="main",graph.fromJSON(contexts[currentContextName].graph),paper.fitToContent({padding:20,minWidth:paperColumn.width(),minHeight:paperColumn.height(),gridWidth:10,gridHeight:10}),start=findModel(contexts[currentContextName].start.id),updateContextsDropdown()}catch(e){swal("Something went wrong!")}finally{clearChat(),renderProgram("Start Flowgramming!"),hideLoader()}}function importFunction(e){try{const n=JSON.retrocycle(JSON.parse(e));if(n.signingKey!==fnSigningKey)return void swal("Not a flowgramming function!");Object.keys(n.contexts).forEach(e=>{addFunctionToTable(e)}),parentWindowContexts={...parentWindowContexts,...n.contexts},window.opener.addNewContext(n.contexts)}catch(e){swal("Something went wrong!")}finally{hideLoader()}}function openFromFile(e,n=!1){showLoader("Importing","Please wait while your flowgram is imported"),setTimeout(()=>{n?importFunction(e):importFlowGram(e)},1e3)}function saveFile(e,n,a="save-btn"){const t=new Blob([n],{type:"application/json;charset=utf-8"});if(window.navigator.msSaveOrOpenBlob)window.navigator.msSaveOrOpenBlob(t,e);else{const n=document.getElementById(a);n.href=URL.createObjectURL(t),n.download=e}}